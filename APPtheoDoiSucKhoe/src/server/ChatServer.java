package server;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ChatServer {
    private static final int PORT = 9876;
    static final Set<ClientHandler> clients = new HashSet<>();
    private static ExecutorService pool = Executors.newFixedThreadPool(10);
    private static final Object LOCK = new Object();

    // L∆∞u tr·ªØ l·ªãch s·ª≠ tin nh·∫Øn (gi·ªõi h·∫°n 50 tin nh·∫Øn g·∫ßn nh·∫•t)
    private static final List<String> messageHistory = new ArrayList<>(50);

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(PORT);
        System.out.println("M√°y ch·ªß ƒë√£ kh·ªüi ƒë·ªông tr√™n c·ªïng " + PORT);

        try {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Ng∆∞·ªùi d√πng m·ªõi k·∫øt n·ªëi: " + clientSocket.getInetAddress().getHostAddress());

                // T·∫°o handler nh∆∞ng CH∆ØA th√™m v√†o danh s√°ch clients
                ClientHandler clientHandler = new ClientHandler(clientSocket);

                // X·ª≠ l√Ω trong m·ªôt thread ri√™ng
                pool.execute(clientHandler);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            serverSocket.close();
        }
    }

    // Thay ƒë·ªïi c√°ch qu·∫£n l√Ω client
    public static synchronized void addClient(ClientHandler clientHandler) {
        if (clientHandler == null || clientHandler.getUsername() == null) {
            System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m client kh√¥ng h·ª£p l·ªá");
            return;
        }

        // Ki·ªÉm tra v√† x√≥a client c≈© tr∆∞·ªõc khi th√™m client m·ªõi
        String username = clientHandler.getUsername();
        removeClientByUsername(username);

        // Th√™m client m·ªõi
        clients.add(clientHandler);
        System.out.println("‚úÖ ƒê√£ th√™m client: " + username + ", hi·ªán c√≥ " + clients.size() + " ng∆∞·ªùi d√πng online");

        // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        broadcastUserList();
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ x√≥a client theo username
    public static synchronized void removeClientByUsername(String username) {
        if (username == null) return;

        Iterator<ClientHandler> iterator = clients.iterator();
        while (iterator.hasNext()) {
            ClientHandler client = iterator.next();
            if (username.equals(client.getUsername())) {
                System.out.println("‚ùå X√≥a client c≈©: " + username);
                try {
                    client.disconnect();
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è L·ªói khi ƒë√≥ng k·∫øt n·ªëi c≈©: " + e.getMessage());
                }
                iterator.remove();
            }
        }
    }

    // S·ª≠a ph∆∞∆°ng th·ª©c removeClient
    public static synchronized void removeClient(ClientHandler client) {
        if (client == null) return;

        boolean removed = clients.remove(client);
        if (removed) {
            System.out.println("‚ùå ƒê√£ x√≥a client: " + client.getUsername() + ", c√≤n l·∫°i " + clients.size() + " ng∆∞·ªùi d√πng online");
            // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng
            broadcastUserList();
        }
    }

    // S·ª≠a ph∆∞∆°ng th·ª©c broadcastUserList
    public static void broadcastUserList() {
        List<String> users = getOnlineUsers();

        if (users.isEmpty()) {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi d√πng online");
            return;
        }

        StringBuilder userList = new StringBuilder("USERS:");
        for (String user : users) {
            if (user != null && !user.trim().isEmpty()) {
                userList.append(user).append(",");
            }
        }

        String userListMessage = userList.toString();
        System.out.println("üë• Ph√°t s√≥ng danh s√°ch ng∆∞·ªùi d√πng: " + userListMessage);

        synchronized (clients) {
            // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh ConcurrentModificationException
            for (ClientHandler client : new HashSet<>(clients)) {
                try {
                    client.sendMessage(userListMessage);
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è L·ªói khi g·ª≠i danh s√°ch ng∆∞·ªùi d√πng ƒë·∫øn " + client.getUsername() + ": " + e.getMessage());
                    // N·∫øu g·∫∑p l·ªói, x√≥a client kh√¥ng ph·∫£n h·ªìi
                    removeClient(client);
                }
            }
        }
    }

    public static void broadcastMessage(String message, ClientHandler sender) {
        // L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ (n·∫øu kh√¥ng ph·∫£i tin nh·∫Øn h·ªá th·ªëng v·ªÅ danh s√°ch ng∆∞·ªùi d√πng)
        if (!message.startsWith("USERS:")) {
            addToMessageHistory(message);
        }

        System.out.println("Ph√°t s√≥ng tin nh·∫Øn: " + message);

        synchronized (LOCK) {
            for (ClientHandler client : clients) {
                try {
                    if (client != sender) {
                        client.sendMessage(message);
                    }
                } catch (Exception e) {
                    System.out.println("L·ªói khi g·ª≠i tin nh·∫Øn: " + e.getMessage());
                }
            }
        }
    }

    // Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠, gi·ªõi h·∫°n k√≠ch th∆∞·ªõc
    private static synchronized void addToMessageHistory(String message) {
        messageHistory.add(message);
        if (messageHistory.size() > 50) {
            messageHistory.remove(0);
        }
    }

    // G·ª≠i l·ªãch s·ª≠ tin nh·∫Øn cho client m·ªõi
    public static void sendMessageHistory(ClientHandler client) {
        for (String message : messageHistory) {
            client.sendMessage(message);
        }
    }


    // L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒëang online
    public static synchronized List<String> getOnlineUsers() {
        List<String> users = new ArrayList<>();
        for (ClientHandler client : clients) {
            if (client.getUsername() != null) {
                users.add(client.getUsername());
            }
        }
        return users;
    }
}